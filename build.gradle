plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'idea'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

bootRun {
	 jvmArgs = ["-Xms2g", "-Xmx2g", "-XX:+UseZGC"]
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.6'
	implementation group: 'net.bramp.ffmpeg', name: 'ffmpeg', version: '0.8.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6', 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
}

sourceSets {
	unit {
		java.srcDir 'src/test/unit/java'
		resources.srcDir 'src/test/unit/resources'
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
	integration {
		java.srcDir 'src/test/integration/java'
		resources.srcDir 'src/test/integration/resources'
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
}

idea {
	module {
		testSources.from(sourceSets.unit.java.srcDirs, sourceSets.unit.resources.srcDirs)
		testSources.from(sourceSets.integration.java.srcDirs, sourceSets.integration.resources.srcDirs)
	}
}

def commonTestJvmArgs = [
		"--add-opens=java.base/java.lang=ALL-UNNAMED",
		"--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
		"--add-opens=java.base/java.util=ALL-UNNAMED"
]

tasks.named('test', Test) {
	description = 'Runs unit tests.'
	group = 'verification'
	testClassesDirs = sourceSets.unit.output.classesDirs
	classpath = sourceSets.unit.runtimeClasspath
	useJUnitPlatform()
	jvmArgs = commonTestJvmArgs
}

tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath
	useJUnitPlatform()
	shouldRunAfter tasks.named('test')
	jvmArgs = commonTestJvmArgs
}

tasks.named('check') {
	dependsOn tasks.named('test')
	dependsOn tasks.named('integrationTest')
}
